# tests/test_e2e.py

import pytest
from playwright.async_api import async_playwright
import asyncio
import subprocess
import time
import requests

@pytest.fixture(scope="session", autouse=True)
async def start_gradio_app():
    # Start the Gradio app in a subprocess
    process = subprocess.Popen(["pdm", "run", "start"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    
    # Function to check if the server is up
    def is_server_running(url="http://localhost:7860/"):
        try:
            response = requests.get(url)
            return response.status_code == 200
        except requests.ConnectionError:
            return False
    
    # Wait until the server is up or timeout after 60 seconds
    timeout = 60
    start_time = time.time()
    while not is_server_running() and (time.time() - start_time) < timeout:
        await asyncio.sleep(1)
    
    if not is_server_running():
        process.terminate()
        stdout, stderr = process.communicate()
        pytest.fail(f"Gradio app failed to start within {timeout} seconds.\nStdout: {stdout}\nStderr: {stderr}")
    
    yield
    # Terminate the Gradio app after tests
    process.terminate()
    try:
        process.wait(timeout=5)
    except subprocess.TimeoutExpired:
        process.kill()

@pytest.mark.asyncio
async def test_chatbot_predefined_response():
    async with async_playwright() as p:
        browser = await p.chromium.launch(headless=True)
        page = await browser.new_page()
        await page.goto("http://localhost:7860")
        # Interact with the chat
        await page.fill("input[type='text']", "What is AI?")
        await page.press("input[type='text']", "Enter")
        # Wait for the response
        await asyncio.sleep(3)
        # Check if the response is as expected
        # Adjust the selector based on your Gradio app's HTML structure
        response = await page.locator("div.chatbot div.message:last-child").inner_text()
        assert "AI stands for Artificial Intelligence." in response
        await browser.close()

@pytest.mark.asyncio
async def test_chatbot_fallback_response():
    async with async_playwright() as p:
        browser = await p.chromium.launch(headless=True)
        page = await browser.new_page()
        await page.goto("http://localhost:7860")
        # Interact with the chat
        await page.fill("input[type='text']", "Tell me a joke.")
        await page.press("input[type='text']", "Enter")
        # Wait for the response
        await asyncio.sleep(3)
        # Check if the response is generated by LLM
        response = await page.locator("div.chatbot div.message:last-child").inner_text()
        assert "I'm sorry" not in response  # Assuming LLM provides a joke
        await browser.close()
